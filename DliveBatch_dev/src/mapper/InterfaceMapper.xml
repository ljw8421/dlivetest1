<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mySql interface DB -->
<mapper namespace="interface">

	<!-- Code -->
	<select id="selectCode" parameterType="vo.CodeVO" resultType="vo.CodeVO">
		select
			cd_id,
			type,
			type_name,
			cd_name,
			cd_val,
			seq,
			use_yn
		from
			code
		where
			type = #{type}
			<if test="use_yn != null and use_yn != ''">
		and use_yn = #{use_yn}
			</if>
			<if test="cd_name != null and cd_name != ''">
		and cd_name = #{cd_name}
			</if>
		order by seq
	</select>

	<!-- Temp Table TRUNCATE -->
	<delete id="deleteResourcesTemp">
		TRUNCATE TABLE TMP_RESOURCES
	</delete>

	<!-- Resources Temp Table Insert -->
	<update id="insertResoucesTemp" parameterType="java.util.Map">
		INSERT INTO TMP_RESOURCES
		(
			  RESOURCEPROFILEID
			, PARTYID
			, PARTYNAME
			, PARTYNUMBER
			, ROLES
			, EMAILADDRESS
			, USERNAME
			, MANAGER
			, MANAGERID
			, ORGANIZATIONS
			, DLIVEBRANCHCODE
		)
		VALUES
		<foreach item="resources" index="index" collection="list" open="" separator="," close="">
			(
				  #{resources.resourceProfileId}
				, #{resources.partyId}
				, #{resources.partyName}
				, #{resources.partyNumber}
				, #{resources.roles}
				, #{resources.emailAddress}
				, #{resources.userName}
				, #{resources.manager}
				, #{resources.managerId}
				, #{resources.organizations}
				, #{resources.dliveBranchCode}
			)
		</foreach>
	</update>
	
	<!-- Temp Table -> Resources Table Update -->
	<update id="insertResources" parameterType="java.util.Map">
		MERGE INTO SC_RESOURCES A
		USING TMP_RESOURCES B
		ON (A.RESOURCEPROFILEID = B.RESOURCEPROFILEID)
		WHEN MATCHED THEN
			UPDATE SET
			      A.PARTYID           = B.PARTYID        
			    , A.PARTYNAME         = B.PARTYNAME      
			    , A.PARTYNUMBER       = B.PARTYNUMBER    
			    , A.ROLES             = B.ROLES          
			    , A.EMAILADDRESS      = B.EMAILADDRESS   
			    , A.USERNAME          = B.USERNAME       
			    , A.MANAGER           = B.MANAGER        
			    , A.MANAGERID         = B.MANAGERID      
			    , A.ORGANIZATIONS     = B.ORGANIZATIONS  
			    , A.DLIVEBRANCHCODE   = B.DLIVEBRANCHCODE
		WHEN NOT MATCHED THEN
			INSERT
			(
				  RESOURCEPROFILEID
				, PARTYID
				, PARTYNAME
				, PARTYNUMBER
				, ROLES
				, EMAILADDRESS
				, USERNAME
				, MANAGER
				, MANAGERID
				, ORGANIZATIONS
				, DLIVEBRANCHCODE
			)
			VALUES
			(
				  B.RESOURCEPROFILEID
				, B.PARTYID
				, B.PARTYNAME
				, B.PARTYNUMBER
				, B.ROLES
				, B.EMAILADDRESS
				, B.USERNAME
				, B.MANAGER
				, B.MANAGERID
				, B.ORGANIZATIONS
				, B.DLIVEBRANCHCODE
			);
	</update>
	
	<!-- Resources Search Lv 1 -->
<!-- 	<select id="getResourcesLv1" resultType="vo.ResourcesVO"> -->
<!-- 		SELECT -->
<!-- 			* -->
<!-- 		FROM -->
<!-- 			SC_Resources -->
<!-- 		WHERE -->
<!-- 			managerId is null -->
<!-- 		AND organizations = '딜라이브' -->
<!-- 		AND roles = '최고 경영자' -->
<!-- 	</select> -->
	
	<!-- Resources Search More -->
<!-- 	<select id="getResourceLv2more" resultType="vo.ResourcesVO"> -->
<!-- 		SELECT  -->
<!-- 			* -->
<!-- 		FROM  -->
<!-- 			SC_Resources -->
<!-- 		WHERE  -->
<!-- 			1=1 -->
<!-- 		AND managerId = #{managerId} -->
<!-- 	</select> -->
	
	<!-- Resources Lv Reset -->
<!-- 	<update id="updateReset" parameterType="vo.ResourcesVO"> -->
<!-- 		UPDATE SC_Resources -->
<!-- 		SET lv1 = null, -->
<!-- 			lv2 = null, -->
<!-- 			lv3 = null, -->
<!-- 			lv4 = null, -->
<!-- 			lv5 = null -->
<!-- 	</update> -->
	
	<!-- Resources Lv (organizations) Update -->
	<!-- resources 레벨 1 -->
<!-- 	<update id="updateLv1" parameterType="vo.ResourcesVO"> -->
<!-- 		update SC_Resources -->
<!-- 		set lv1 = #{lv1} -->
<!-- 		where resourceProfileId = #{resourceProfileId} -->
<!-- 	</update> -->
	
	<!-- resources 레벨 2 -->
<!-- 	<update id="updateLv2" parameterType="vo.ResourcesVO"> -->
<!-- 		UPDATE SC_Resources -->
<!-- 		SET lv1 = #{lv1}, lv2 = organizations -->
<!-- 		WHERE managerId = #{managerId} -->
<!-- 	</update> -->
	
	<!-- resources 레벨 3 -->
<!-- 	<update id="updateLv3" parameterType="vo.ResourcesVO"> -->
<!-- 		UPDATE SC_Resources -->
<!-- 		SET lv1 = #{lv1}, lv2 = #{lv2}, lv3 = organizations -->
<!-- 		WHERE managerId = #{managerId} -->
<!-- 	</update> -->
	
	<!-- resources 레벨 4 -->
<!-- 	<update id="updateLv4" parameterType="vo.ResourcesVO"> -->
<!-- 		UPDATE SC_Resources -->
<!-- 		SET lv1 = #{lv1}, lv2 = #{lv2}, lv3 = #{lv3}, lv4 = organizations -->
<!-- 		WHERE managerId = #{managerId} -->
<!-- 	</update>	 -->
	
	<!-- resources 레벨 5 -->
<!-- 	<update id="updateLv5" parameterType="vo.ResourcesVO"> -->
<!-- 		UPDATE SC_Resources -->
<!-- 		SET lv1 = #{lv1}, lv2 = #{lv2}, lv3 = #{lv3}, lv4 = #{lv4}, lv5 = organizations	자기 자신의 컬럼을 넣는다. -->
<!-- 		WHERE managerId = #{managerId} -->
<!-- 	</update> -->
	
	<delete id="deleteAccountTemp">
		TRUNCATE TABLE TMP_ACCOUNT
	</delete>

	<!-- Account Temp Table Insert -->
	<update id="insertAccountTemp" parameterType="java.util.Map">
		INSERT INTO TMP_ACCOUNT
		(
			  PARTYID
			, PARTYNUMBER
			, SOURCESYSTEM 
			, SOURCESYSTEMREFERENCEVALUE 
			, ORGANIZATIONNAME 
			, TYPE 
			, OWNERPARTYID 
			, OWNERPARTYNUMBER 
			, OWNEREMAILADDRESS
			, OWNERNAME
			, SALESPROFILESTATUS 
			, CREATEDBY
			, CREATIONDATE 
			, LASTUPDATEDATE 
			, LASTUPDATEDBY
			, PHONECOUNTRYCODE 
			, PHONEAREACODE
			, PHONENUMBER
			, PHONEEXTENSION 
			, ADDRESSNUMBER
			, ADDRESSLINE1 
			, ADDRESSLINE2 
			, CITY 
			, COUNTRY
			, POSTALCODE 
			, PROVINCE 
			, STATE
			, SOCIETYTYPE_C
			, SOCIETYTYPEF_C
			, NEWBUILDFLAG_C 
			, BUILDDATE_C
			, NETWORKINDATE_C
			, HOUSEHOLDNUMBER_C
			, INVASIONRATE_C 
			, STANDARDFEE_C
			, SURFEE_C 
			, CONAID_C 
			, DTVCOUNT_C 
			, ISPCOUNT_C 
			, VOIPCOUNT_C
			, SHARERATE_C
			, REMARKF_C 
			, TYPEOFBUSINESS_C 
			, OTTCOUNT_C 
			, CONTRACTFROM_C 
			, CONTRACTTO_C 
			, INVASIONRATEF_C
			, BRANCHNM_C 
		)
		VALUES
		<foreach item="account" index="index" collection="list" open="" separator="," close="">
			(
				   #{account.partyId}
				,  #{account.partyNumber}
				,  #{account.sourceSystem}
				,  #{account.sourceSystemReferenceValue}
				,  #{account.organizationName}
				,  #{account.type}
				,  #{account.ownerPartyId}
				,  #{account.ownerPartyNumber}
				,  #{account.ownerEmailAddress}
				,  #{account.ownerName}
				,  #{account.salesProfileStatus}
				,  #{account.createdBy}
				,  #{account.creationDate}
				,  #{account.lastUpdateDate}
				,  #{account.lastUpdatedBy}
				,  #{account.phoneCountryCode}
				,  #{account.phoneAreaCode}
				,  #{account.phoneNumber}
				,  #{account.phoneExtension}
				,  #{account.addressNumber}
				,  #{account.addressLine1}
				,  #{account.addressLine2}
				,  #{account.city}
				,  #{account.country}
				,  #{account.postalCode}
				,  #{account.province}
				,  #{account.state}
				,  #{account.SocietyType_c}
				,  #{account.SocietyTypeF_c}
				,  #{account.NewBuildFlag_c}
				,  #{account.BuildDate_c}
				,  #{account.NetworkInDate_c}
				,  #{account.HouseholdNumber_c}
				,  #{account.InvasionRate_c}
				,  #{account.StandardFee_c}
				,  #{account.SurFee_c}
				,  #{account.ConaId_c}
				,  #{account.DTVCount_c}
				,  #{account.ISPCount_c}
				,  #{account.VoIPCount_c}
				,  #{account.ShareRate_c}
				,  #{account.RemarkF_c}
				,  #{account.TypeOfBusiness_c}
				,  #{account.OTTCount_c}
				,  #{account.ContractFrom_c}
				,  #{account.ContractTo_c}
				,  #{account.InvasionRateF_c}
				,  #{account.BranchNm_c}
			)
		</foreach>
	</update>
	
	<!-- Temp Table -> Account Table Update -->
	<update id="insertAccount" parameterType="java.util.Map">
		MERGE INTO SC_ACCOUNT A
		USING TMP_ACCOUNT B
		ON (A.PARTYID = B.PARTYID)
		WHEN MATCHED THEN
			UPDATE SET
			      A.PARTYNUMBER                     = B.PARTYNUMBER                      
				, A.SOURCESYSTEM                    = B.SOURCESYSTEM                     
				, A.SOURCESYSTEMREFERENCEVALUE      = B.SOURCESYSTEMREFERENCEVALUE       
				, A.ORGANIZATIONNAME                = B.ORGANIZATIONNAME                 
				, A.TYPE                            = B.TYPE                             
				, A.OWNERPARTYID                    = B.OWNERPARTYID                     
				, A.OWNERPARTYNUMBER                = B.OWNERPARTYNUMBER                 
				, A.OWNEREMAILADDRESS               = B.OWNEREMAILADDRESS                
				, A.OWNERNAME                       = B.OWNERNAME                        
				, A.SALESPROFILESTATUS              = B.SALESPROFILESTATUS               
				, A.CREATEDBY                       = B.CREATEDBY                        
				, A.CREATIONDATE                    = B.CREATIONDATE                     
				, A.LASTUPDATEDATE                  = B.LASTUPDATEDATE                   
				, A.LASTUPDATEDBY                   = B.LASTUPDATEDBY                    
				, A.PHONECOUNTRYCODE                = B.PHONECOUNTRYCODE                 
				, A.PHONEAREACODE                   = B.PHONEAREACODE                    
				, A.PHONENUMBER                     = B.PHONENUMBER                      
				, A.PHONEEXTENSION                  = B.PHONEEXTENSION                   
				, A.ADDRESSNUMBER                   = B.ADDRESSNUMBER                    
				, A.ADDRESSLINE1                    = B.ADDRESSLINE1                     
				, A.ADDRESSLINE2                    = B.ADDRESSLINE2                     
				, A.CITY                            = B.CITY                             
				, A.COUNTRY                         = B.COUNTRY                          
				, A.POSTALCODE                      = B.POSTALCODE                       
				, A.PROVINCE                        = B.PROVINCE                         
				, A.STATE                           = B.STATE                            
				, A.SOCIETYTYPE_C         			= B.SOCIETYTYPE_C 
				, A.SOCIETYTYPEF_C        			= B.SOCIETYTYPEF_C   
				, A.NEWBUILDFLAG_C        			= B.NEWBUILDFLAG_C   
				, A.BUILDDATE_C           			= B.BUILDDATE_C      
				, A.NETWORKINDATE_C       			= B.NETWORKINDATE_C  
				, A.HOUSEHOLDNUMBER_C     			= B.HOUSEHOLDNUMBER_C
				, A.INVASIONRATE_C        			= B.INVASIONRATE_C   
				, A.STANDARDFEE_C         			= B.STANDARDFEE_C    
				, A.SURFEE_C              			= B.SURFEE_C         
				, A.CONAID_C              			= B.CONAID_C         
				, A.DTVCOUNT_C            			= B.DTVCOUNT_C       
				, A.ISPCOUNT_C            			= B.ISPCOUNT_C       
				, A.VOIPCOUNT_C           			= B.VOIPCOUNT_C      
				, A.SHARERATE_C           			= B.SHARERATE_C      
				, A.REMARKF_C              			= B.REMARKF_C         
				, A.TYPEOFBUSINESS_C      			= B.TYPEOFBUSINESS_C 
				, A.OTTCOUNT_C            			= B.OTTCOUNT_C       
				, A.CONTRACTFROM_C        			= B.CONTRACTFROM_C   
				, A.CONTRACTTO_C          			= B.CONTRACTTO_C     
				, A.INVASIONRATEF_C       			= B.INVASIONRATEF_C  
				, A.BRANCHNM_C            			= B.BRANCHNM_C       
				, A.WORKDATE            			= GETDATE()
				, A.TRNSYN            			    = 'N'      
		WHEN NOT MATCHED THEN
			INSERT
			(
				  PARTYID                          
				, PARTYNUMBER                      
				, SOURCESYSTEM                     
				, SOURCESYSTEMREFERENCEVALUE       
				, ORGANIZATIONNAME                 
				, TYPE                             
				, OWNERPARTYID                     
				, OWNERPARTYNUMBER                 
				, OWNEREMAILADDRESS                
				, OWNERNAME                        
				, SALESPROFILESTATUS               
				, CREATEDBY                        
				, CREATIONDATE                     
				, LASTUPDATEDATE                   
				, LASTUPDATEDBY                    
				, PHONECOUNTRYCODE                 
				, PHONEAREACODE                    
				, PHONENUMBER                      
				, PHONEEXTENSION                   
				, ADDRESSNUMBER                    
				, ADDRESSLINE1                     
				, ADDRESSLINE2                     
				, CITY                             
				, COUNTRY                          
				, POSTALCODE                       
				, PROVINCE                         
				, STATE                            
				, SOCIETYTYPE_C    
				, SOCIETYTYPEF_C   
				, NEWBUILDFLAG_C   
				, BUILDDATE_C      
				, NETWORKINDATE_C  
				, HOUSEHOLDNUMBER_C
				, INVASIONRATE_C   
				, STANDARDFEE_C    
				, SURFEE_C         
				, CONAID_C         
				, DTVCOUNT_C       
				, ISPCOUNT_C       
				, VOIPCOUNT_C      
				, SHARERATE_C      
				, REMARKF_C         
				, TYPEOFBUSINESS_C 
				, OTTCOUNT_C       
				, CONTRACTFROM_C   
				, CONTRACTTO_C     
				, INVASIONRATEF_C  
				, BRANCHNM_C       
				, WORKDATE
				, TRNSYN 
			)
			VALUES
			(
				  B.PARTYID                          
				, B.PARTYNUMBER                      
				, B.SOURCESYSTEM                     
				, B.SOURCESYSTEMREFERENCEVALUE       
				, B.ORGANIZATIONNAME                 
				, B.TYPE                             
				, B.OWNERPARTYID                     
				, B.OWNERPARTYNUMBER                 
				, B.OWNEREMAILADDRESS                
				, B.OWNERNAME                        
				, B.SALESPROFILESTATUS               
				, B.CREATEDBY                        
				, B.CREATIONDATE                     
				, B.LASTUPDATEDATE                   
				, B.LASTUPDATEDBY                    
				, B.PHONECOUNTRYCODE                 
				, B.PHONEAREACODE                    
				, B.PHONENUMBER                      
				, B.PHONEEXTENSION                   
				, B.ADDRESSNUMBER                    
				, B.ADDRESSLINE1                     
				, B.ADDRESSLINE2                     
				, B.CITY                             
				, B.COUNTRY                          
				, B.POSTALCODE                       
				, B.PROVINCE                         
				, B.STATE                            
				, B.SOCIETYTYPE_C   
				, B.SOCIETYTYPEF_C  
				, B.NEWBUILDFLAG_C   
				, B.BUILDDATE_C      
				, B.NETWORKINDATE_C  
				, B.HOUSEHOLDNUMBER_C
				, B.INVASIONRATE_C   
				, B.STANDARDFEE_C    
				, B.SURFEE_C         
				, B.CONAID_C         
				, B.DTVCOUNT_C       
				, B.ISPCOUNT_C       
				, B.VOIPCOUNT_C      
				, B.SHARERATE_C      
				, B.REMARKF_C         
				, B.TYPEOFBUSINESS_C 
				, B.OTTCOUNT_C       
				, B.CONTRACTFROM_C   
				, B.CONTRACTTO_C     
				, B.INVASIONRATEF_C  
				, B.BRANCHNM_C   
				, GETDATE()
				, 'N'  
			);
	</update>
	
	<!-- 거래처(account) -->
<!-- 	<update id="updateAccountDelflg" > -->
<!-- 		UPDATE SC_ACCOUNT -->
<!-- 		SET DELFLAG = 'Y' -->
<!-- 	</update> -->
	
	<delete id="deleteOpportunityTemp">
		TRUNCATE TABLE TMP_OPPORTUNITY
	</delete>
	
	<!-- Opportunity Temp Table Insert -->
	<update id="insertOpportunityTemp" parameterType="java.util.Map">
		INSERT INTO TMP_OPPORTUNITY
		(
			  OPTYID                       
			, OPTYNUMBER                   
			, NAME                         
			, TARGETPARTYID                
			, TARGETPARTYNAME              
			, OWNERRESOURCEPARTYID         
			, STATUSCODE                   
			, SALESSTAGE                   
			, COMMENTS                     
			, EFFECTIVEDATE                
			, WINPROB                      
			, PRIMARYCONTACTPARTYNAME      
			, SALESCHANNELCD               
			, OPPTYTYPE_C                  
			, COMPETITOR_C                 
			, COMPETITORETC_C              
			, OPENTYPE_C                   
			, COMPLETETYPE_C               
			, SUCCESSCAUSE_C               
			, FAILCAUSE_C                  
			, BRANCHNAMEF_C                
			, BRANCHCODEF_C                
			, APPROVALID_C                 
			, GOOD1_C                      
			, GOOD1QTY_C                   
			, GOOD1PRICE_C                 
			, GOOD1CALCF_C                 
			, GOOD2_C                      
			, GOOD2PRICE_C                 
			, GOOD2QTY_C                   
			, GOOD2CALCF_C                 
			, GOOD3_C                      
			, GOOD3PRICE_C                 
			, GOOD3QTY_C                   
			, GOOD3CALCF_C                 
			, GOOD4_C                      
			, GOOD4PRICE_C                 
			, GOOD4QTY_C                   
			, GOOD4CALCF_C                 
			, GOODTOTALCALCF_C             
			, OPTYBRANCH_C                 
			, CREATEDBY                    
			, CREATIONDATE                 
			, LASTUPDATEDATE               
			, LASTUPDATEDBY          
		)
		VALUES
		<foreach item="opportunity" index="index" collection="list" open="" separator="," close="">
			(
				  #{opportunity.optyId}
				, #{opportunity.optyNumber}
				, #{opportunity.name}
				, #{opportunity.targetPartyId}
				, #{opportunity.targetPartyName}
				, #{opportunity.ownerResourcePartyId}
				, #{opportunity.statusCode}
				, #{opportunity.salesStage}
				, #{opportunity.comments}
				, #{opportunity.effectiveDate}
				, #{opportunity.winProb}
				, #{opportunity.primaryContactPartyName}
				, #{opportunity.salesChannelCd}
				, #{opportunity.opptyType_c}
				, #{opportunity.competitor_c}
				, #{opportunity.competitorETC_c}
				, #{opportunity.openType_c}
				, #{opportunity.completeType_c}
				, #{opportunity.successCause_c}
				, #{opportunity.failCause_c}
				, #{opportunity.branchNameF_c}
				, #{opportunity.branchCodeF_c}
				, #{opportunity.approvalID_c}
				, #{opportunity.good1_c}
				, #{opportunity.good1Qty_c}
				, #{opportunity.good1Price_c}
				, #{opportunity.good1CalcF_c}
				, #{opportunity.good2_c}
				, #{opportunity.good2Price_c}
				, #{opportunity.good2Qty_c}
				, #{opportunity.good2CalcF_c}
				, #{opportunity.good3_c}
				, #{opportunity.good3Price_c}
				, #{opportunity.good3Qty_c}
				, #{opportunity.good3CalcF_c}
				, #{opportunity.good4_c}
				, #{opportunity.good4Price_c}
				, #{opportunity.good4Qty_c}
				, #{opportunity.good4CalcF_c}
				, #{opportunity.goodTotalCalcF_c}
				, #{opportunity.optyBranch_c}
				, #{opportunity.createdBy}
				, #{opportunity.creationDate}
				, #{opportunity.lastUpdateDate}
				, #{opportunity.lastUpdatedBy}
			)
		</foreach>
	</update>
	
	<!-- Temp Table -> Opportunity Table Update -->
	<update id="insertOpportunity" parameterType="java.util.Map">
		MERGE INTO SC_OPPORTUNITY A
		USING TMP_OPPORTUNITY B
		ON (A.OPTYID = B.OPTYID)
		WHEN MATCHED THEN
			UPDATE SET
				  A.OPTYNUMBER              = B.OPTYNUMBER                  
				, A.NAME                    = B.NAME                        
				, A.TARGETPARTYID           = B.TARGETPARTYID               
				, A.TARGETPARTYNAME         = B.TARGETPARTYNAME             
				, A.OWNERRESOURCEPARTYID    = B.OWNERRESOURCEPARTYID        
				, A.STATUSCODE              = B.STATUSCODE                  
				, A.SALESSTAGE              = B.SALESSTAGE                  
				, A.COMMENTS                = B.COMMENTS                    
				, A.EFFECTIVEDATE           = B.EFFECTIVEDATE               
				, A.WINPROB                 = B.WINPROB                     
				, A.PRIMARYCONTACTPARTYNAME = B.PRIMARYCONTACTPARTYNAME     
				, A.SALESCHANNELCD          = B.SALESCHANNELCD              
				, A.OPPTYTYPE_C             = B.OPPTYTYPE_C                 
				, A.COMPETITOR_C            = B.COMPETITOR_C                
				, A.COMPETITORETC_C         = B.COMPETITORETC_C             
				, A.OPENTYPE_C              = B.OPENTYPE_C                  
				, A.COMPLETETYPE_C          = B.COMPLETETYPE_C              
				, A.SUCCESSCAUSE_C          = B.SUCCESSCAUSE_C              
				, A.FAILCAUSE_C             = B.FAILCAUSE_C                 
				, A.BRANCHNAMEF_C           = B.BRANCHNAMEF_C               
				, A.BRANCHCODEF_C           = B.BRANCHCODEF_C               
				, A.APPROVALID_C            = B.APPROVALID_C                
				, A.GOOD1_C                 = B.GOOD1_C                     
				, A.GOOD1QTY_C              = B.GOOD1QTY_C                  
				, A.GOOD1PRICE_C            = B.GOOD1PRICE_C                
				, A.GOOD1CALCF_C            = B.GOOD1CALCF_C                
				, A.GOOD2_C                 = B.GOOD2_C                     
				, A.GOOD2PRICE_C            = B.GOOD2PRICE_C                
				, A.GOOD2QTY_C              = B.GOOD2QTY_C                  
				, A.GOOD2CALCF_C            = B.GOOD2CALCF_C                
				, A.GOOD3_C                 = B.GOOD3_C                     
				, A.GOOD3PRICE_C            = B.GOOD3PRICE_C                
				, A.GOOD3QTY_C              = B.GOOD3QTY_C                  
				, A.GOOD3CALCF_C            = B.GOOD3CALCF_C                
				, A.GOOD4_C                 = B.GOOD4_C                     
				, A.GOOD4PRICE_C            = B.GOOD4PRICE_C                
				, A.GOOD4QTY_C              = B.GOOD4QTY_C                  
				, A.GOOD4CALCF_C            = B.GOOD4CALCF_C                
				, A.GOODTOTALCALCF_C        = B.GOODTOTALCALCF_C            
				, A.OPTYBRANCH_C            = B.OPTYBRANCH_C                
				, A.CREATEDBY               = B.CREATEDBY                   
				, A.CREATIONDATE            = B.CREATIONDATE                
				, A.LASTUPDATEDATE          = B.LASTUPDATEDATE              
				, A.LASTUPDATEDBY           = B.LASTUPDATEDBY               
				, A.WORKDATE            	= GETDATE()
				, A.TRNSYN            		= 'N'
		WHEN NOT MATCHED THEN
			INSERT
			(
				  OPTYID                       
				, OPTYNUMBER                   
				, NAME                         
				, TARGETPARTYID                
				, TARGETPARTYNAME              
				, OWNERRESOURCEPARTYID         
				, STATUSCODE                   
				, SALESSTAGE                   
				, COMMENTS                     
				, EFFECTIVEDATE                
				, WINPROB                      
				, PRIMARYCONTACTPARTYNAME      
				, SALESCHANNELCD               
				, OPPTYTYPE_C                  
				, COMPETITOR_C                 
				, COMPETITORETC_C              
				, OPENTYPE_C                   
				, COMPLETETYPE_C               
				, SUCCESSCAUSE_C               
				, FAILCAUSE_C                  
				, BRANCHNAMEF_C                
				, BRANCHCODEF_C                
				, APPROVALID_C                 
				, GOOD1_C                      
				, GOOD1QTY_C                   
				, GOOD1PRICE_C                 
				, GOOD1CALCF_C                 
				, GOOD2_C                      
				, GOOD2PRICE_C                 
				, GOOD2QTY_C                   
				, GOOD2CALCF_C                 
				, GOOD3_C                      
				, GOOD3PRICE_C                 
				, GOOD3QTY_C                   
				, GOOD3CALCF_C                 
				, GOOD4_C                      
				, GOOD4PRICE_C                 
				, GOOD4QTY_C                   
				, GOOD4CALCF_C                 
				, GOODTOTALCALCF_C             
				, OPTYBRANCH_C                 
				, CREATEDBY                    
				, CREATIONDATE                 
				, LASTUPDATEDATE               
				, LASTUPDATEDBY
				, WORKDATE
				, TRNSYN  
			)
			VALUES
			(
				  B.OPTYID                       
				, B.OPTYNUMBER                   
				, B.NAME                         
				, B.TARGETPARTYID                
				, B.TARGETPARTYNAME              
				, B.OWNERRESOURCEPARTYID         
				, B.STATUSCODE                   
				, B.SALESSTAGE                   
				, B.COMMENTS                     
				, B.EFFECTIVEDATE                
				, B.WINPROB                      
				, B.PRIMARYCONTACTPARTYNAME      
				, B.SALESCHANNELCD               
				, B.OPPTYTYPE_C                  
				, B.COMPETITOR_C                 
				, B.COMPETITORETC_C              
				, B.OPENTYPE_C                   
				, B.COMPLETETYPE_C               
				, B.SUCCESSCAUSE_C               
				, B.FAILCAUSE_C                  
				, B.BRANCHNAMEF_C                
				, B.BRANCHCODEF_C                
				, B.APPROVALID_C                 
				, B.GOOD1_C                      
				, B.GOOD1QTY_C                   
				, B.GOOD1PRICE_C                 
				, B.GOOD1CALCF_C                 
				, B.GOOD2_C                      
				, B.GOOD2PRICE_C                 
				, B.GOOD2QTY_C                   
				, B.GOOD2CALCF_C                 
				, B.GOOD3_C                      
				, B.GOOD3PRICE_C                 
				, B.GOOD3QTY_C                   
				, B.GOOD3CALCF_C                 
				, B.GOOD4_C                      
				, B.GOOD4PRICE_C                 
				, B.GOOD4QTY_C                   
				, B.GOOD4CALCF_C                 
				, B.GOODTOTALCALCF_C             
				, B.OPTYBRANCH_C                 
				, B.CREATEDBY                    
				, B.CREATIONDATE                 
				, B.LASTUPDATEDATE               
				, B.LASTUPDATEDBY  
				, GETDATE()
				, 'N'            
			);
	</update>
	
	<delete id="deleteOpportunityLeadTemp">
		TRUNCATE TABLE TMP_OPPORTUNITYLEAD
	</delete>
	
	<!-- Opportunity Temp Table Insert -->
	<update id="insertOpportunityLeadTemp" parameterType="java.util.Map">
		INSERT INTO TMP_OPPORTUNITYLEAD
		(
			  OPTYID                       
			, OPTYLEADID                         
		)
		VALUES
		<foreach item="opportunityLead" index="index" collection="list" open="" separator="," close="">
			(
				  #{opportunityLead.optyId}
				, #{opportunityLead.optyLeadId}
			)
		</foreach>
	</update>
	
	<!-- Temp Table -> Opportunity Table Update -->
	<update id="insertOpportunityLead" parameterType="java.util.Map">
		MERGE INTO SC_OPPORTUNITYLEAD A
		USING TMP_OPPORTUNITYLEAD B
		ON (A.OPTYID = B.OPTYID)
		WHEN MATCHED THEN
			UPDATE SET
				  A.OPTYLEADID              = B.OPTYLEADID                  
				, A.WORKDATE            	= GETDATE()
				, A.TRNSYN            		= 'N'
		WHEN NOT MATCHED THEN
			INSERT
			(
				  OPTYID                       
				, OPTYLEADID                   
				, WORKDATE
				, TRNSYN  
			)
			VALUES
			(
				  B.OPTYID                       
				, B.OPTYLEADID                   
				, GETDATE()
				, 'N'            
			);
	</update>
	
	<!-- 영업기회(Opportunity) -->
<!-- 	<update id="updateOpportunityDelflg" > -->
<!-- 		UPDATE SC_OPPORTUNITY -->
<!-- 		SET DELFLAG = 'Y' -->
<!-- 	</update> -->
	
	<!-- Activity Temp Delete -->
	<delete id="deleteActivityTemp">
      TRUNCATE TABLE TMP_ACTIVITY
	</delete>

	<!-- Activity Temp Table Insert -->
	<update id="insertActivityTemp" parameterType="java.util.Map">
      INSERT INTO TMP_ACTIVITY
      (
           ACTIVITYID
         , ACTIVITYNUMBER
         , ACCOUNTID
         , ACCOUNTNAME
         , ACTIVITYFUNCTIONCODE
         , ACTIVITYTYPECODE
         , ACTIVITYSTARTDATE
         , ACTIVITYENDDATE
         , OWNERID
         , OWNERNAME
         , OWNEREMAILADDRESS
         , SUBJECT
         , ACTIVITYDESCRIPTION
         , LEADID
         , LEADNAME
         , OPPORTUNITYID
         , OPPORTUNITYNAME
         , PRIMARYCONTACTID
         , PRIMARYCONTACTNAME
         , VISITRESULT_C
         , VISITDATE_C
         , INITIALDATE_C
         , CREATEDBY
         , CREATIONDATE
         , LASTUPDATEDATE
         , LASTUPDATEDBY
         , ACTBRANCH_C
         , privateFlag
      )
      VALUES
      <foreach item="activity" index="index" collection="list" open="" separator="," close="">
         (
              #{activity.activityId}
            , #{activity.activityNumber}
            , #{activity.accountId}
            , #{activity.accountName}
            , #{activity.activityFunctioncode}
            , #{activity.activityTypeCode}
            , #{activity.activityStartDate}
            , #{activity.activityEndDate}
            , #{activity.ownerId}
            , #{activity.ownerName}
            , #{activity.ownerEmailAddress}
            , #{activity.subject}
            , #{activity.activityDescription}
            , #{activity.leadId}
            , #{activity.leadName}
            , #{activity.opportunityId}
            , #{activity.opportunityName}
            , #{activity.primaryContactId}
            , #{activity.primaryContactName}
            , #{activity.visitResult_c}
            , #{activity.visitDate_c}
            , #{activity.initialDate_c}
            , #{activity.createdBy}
            , #{activity.creationDate}
            , #{activity.lastUpdateDate}
            , #{activity.lastUpdatedBy}
            , #{activity.actBranch_c}
            , #{activity.privateFlag}
         )
      </foreach>
   </update>
   
   <!-- Temp Table -> Activity Table Update -->
   <update id="insertActivity" parameterType="java.util.Map">
      MERGE INTO SC_ACTIVITY A
      USING TMP_ACTIVITY B
      ON (A.ACTIVITYID = B.ACTIVITYID)
      WHEN MATCHED THEN
         UPDATE SET
              A.ACTIVITYNUMBER          = B.ACTIVITYNUMBER
            , A.ACCOUNTID               = B.ACCOUNTID
            , A.ACCOUNTNAME             = B.ACCOUNTNAME
            , A.ACTIVITYFUNCTIONCODE    = B.ACTIVITYFUNCTIONCODE
            , A.ACTIVITYTYPECODE        = B.ACTIVITYTYPECODE
            , A.ACTIVITYSTARTDATE       = B.ACTIVITYSTARTDATE
            , A.ACTIVITYENDDATE         = B.ACTIVITYENDDATE
            , A.OWNERID                 = B.OWNERID
            , A.OWNERNAME               = B.OWNERNAME
            , A.OWNEREMAILADDRESS       = B.OWNEREMAILADDRESS
            , A.SUBJECT                 = B.SUBJECT
            , A.ACTIVITYDESCRIPTION     = B.ACTIVITYDESCRIPTION
            , A.LEADID                  = B.LEADID
            , A.LEADNAME                = B.LEADNAME
            , A.OPPORTUNITYID           = B.OPPORTUNITYID
            , A.OPPORTUNITYNAME         = B.OPPORTUNITYNAME
            , A.PRIMARYCONTACTID        = B.PRIMARYCONTACTID
            , A.PRIMARYCONTACTNAME      = B.PRIMARYCONTACTNAME
            , A.VISITRESULT_C           = B.VISITRESULT_C
            , A.VISITDATE_C             = B.VISITDATE_C
            , A.INITIALDATE_C           = B.INITIALDATE_C
            , A.CREATEDBY               = B.CREATEDBY
            , A.CREATIONDATE            = B.CREATIONDATE
            , A.LASTUPDATEDATE          = B.LASTUPDATEDATE
            , A.LASTUPDATEDBY           = B.LASTUPDATEDBY
            , A.WORKDATE                = CONVERT(DATETIME,GETDATE(),120)
            , A.ACTBRANCH_C             = B.ACTBRANCH_C  
            , A.DELYN                   = 'N'
            , A.privateFlag             = B.privateFlag
      WHEN NOT MATCHED THEN
         INSERT
         (
              ACTIVITYID
            , ACTIVITYNUMBER
            , ACCOUNTID
            , ACCOUNTNAME
            , ACTIVITYFUNCTIONCODE
            , ACTIVITYTYPECODE
            , ACTIVITYSTARTDATE
            , ACTIVITYENDDATE
            , OWNERID
            , OWNERNAME
            , OWNEREMAILADDRESS
            , SUBJECT
            , ACTIVITYDESCRIPTION
            , LEADID
            , LEADNAME
            , OPPORTUNITYID
            , OPPORTUNITYNAME
            , PRIMARYCONTACTID
            , PRIMARYCONTACTNAME
            , VISITRESULT_C
            , VISITDATE_C
            , INITIALDATE_C
            , CREATEDBY
            , CREATIONDATE
            , LASTUPDATEDATE
            , LASTUPDATEDBY
            , WORKDATE
            , ACTBRANCH_C
            , DELYN
            , privateFlag
         )
         VALUES
         (
              B.ACTIVITYID
            , B.ACTIVITYNUMBER
            , B.ACCOUNTID
            , B.ACCOUNTNAME
            , B.ACTIVITYFUNCTIONCODE
            , B.ACTIVITYTYPECODE
            , B.ACTIVITYSTARTDATE
            , B.ACTIVITYENDDATE
            , B.OWNERID
            , B.OWNERNAME
            , B.OWNEREMAILADDRESS
            , B.SUBJECT
            , B.ACTIVITYDESCRIPTION
            , B.LEADID
            , B.LEADNAME
            , B.OPPORTUNITYID
            , B.OPPORTUNITYNAME
            , B.PRIMARYCONTACTID
            , B.PRIMARYCONTACTNAME
            , B.VISITRESULT_C
            , B.VISITDATE_C
            , B.INITIALDATE_C
            , B.CREATEDBY
            , B.CREATIONDATE
            , B.LASTUPDATEDATE
            , B.LASTUPDATEDBY
            , CONVERT(DATETIME,GETDATE(),120)
            , B.ACTBRANCH_C
            , 'N'
            , B.privateFlag
         );
   </update>
   <!-- 영업기회(Opportunity) -->
	<update id="updateActivityDelflg" >
		UPDATE SC_ACTIVITY
		SET DELYN = 'Y'
	</update>
	
	   <!-- Lead Integration Temp Insert -->
	<update id="insertLeadTemp" parameterType="java.util.Map">
	   INSERT INTO dbo.tmp_lead
	   (
	        LeadId, Name, LeadNumber, OwnerPartyName
	      , OwnerId, StatusCode, StatusCdMeaning, CustomerPartyName
	      , CustomerRegistryId, CustomerId, Description, ChannelType, SalesChannelMeaning
	      , ChannelTypeMeaning, PrimaryContactPartyName, PrimaryContactId, PrimaryContactCountry
	      , PrimaryContactProvince, PrimaryContactState, PrimaryContactCity, PrimaryContactAddress1
	      , PrimaryContactAddress2, PrimaryContactPostalCode, RetiredDateTime, ConvertedTimestamp
	      , DeleteFlag, BranchNameF_c, BranchCodeF_c, LeadBranch_c
	      , CreationDate, CreatedBy, LastUpdateDate, LastUpdatedBy
	   )
	   VALUES
	   <foreach item="lead" index="index" collection="list" open="" separator="," close="">
	      (
	           #{lead.leadId}, #{lead.name}, #{lead.leadNumber}, #{lead.ownerPartyName}
	         , #{lead.ownerId}, #{lead.statusCode}, #{lead.statusCdMeaning}, #{lead.customerPartyName}
	         , #{lead.customerRegistryId}, #{lead.customerId}, #{lead.description}, #{lead.channelType}, #{lead.salesChannelMeaning}
	         , #{lead.channelTypeMeaning}, #{lead.primaryContactPartyName}, #{lead.primaryContactId}, #{lead.primaryContactCountry}
	         , #{lead.primaryContactProvince}, #{lead.primaryContactState}, #{lead.primaryContactCity}, #{lead.primaryContactAddress1}, #{lead.primaryContactAddress2}, #{lead.primaryContactPostalCode}
	         , #{lead.retiredDateTime}, #{lead.convertedTimestamp}, #{lead.deleteFlag}, #{lead.branchNameF_c}, #{lead.branchCodeF_c}
	         , #{lead.leadBranch_c}, #{lead.creationDate}, #{lead.createdBy}, #{lead.lastUpdateDate}, #{lead.lastUpdatedBy}
	      )
	   </foreach>
	</update>
	
	<!-- Lead Integration Insert -->
	<update id="insertLead" parameterType="java.util.Map">
	   MERGE INTO dbo.sc_lead A
	   USING dbo.tmp_lead B
	   ON (A.LeadId = B.LeadId)
	   WHEN MATCHED THEN
	      UPDATE SET
	           A.LeadId                   = B.LeadId                  
	         , A.Name                     = B.Name                    
	         , A.LeadNumber               = B.LeadNumber              
	         , A.OwnerPartyName           = B.OwnerPartyName          
	         , A.OwnerId                  = B.OwnerId                 
	         , A.StatusCode               = B.StatusCode              
	         , A.StatusCdMeaning          = B.StatusCdMeaning         
	         , A.CustomerPartyName        = B.CustomerPartyName       
	         , A.CustomerRegistryId       = B.CustomerRegistryId      
	         , A.CustomerId               = B.CustomerId              
	         , A.Description              = B.Description             
	         , A.ChannelType              = B.ChannelType             
	         , A.ChannelTypeMeaning       = B.ChannelTypeMeaning  
	         , A.SalesChannelMeaning      = B.SalesChannelMeaning  
	         , A.RetiredDateTime          = B.RetiredDateTime         
	         , A.PrimaryContactPartyName  = B.PrimaryContactPartyName 
	         , A.PrimaryContactId         = B.PrimaryContactId        
	         , A.PrimaryContactCountry    = B.PrimaryContactCountry   
	         , A.PrimaryContactProvince   = B.PrimaryContactProvince  
	         , A.PrimaryContactState      = B.PrimaryContactState     
	         , A.PrimaryContactCity       = B.PrimaryContactCity      
	         , A.PrimaryContactAddress1   = B.PrimaryContactAddress1  
	         , A.PrimaryContactAddress2   = B.PrimaryContactAddress2  
	         , A.PrimaryContactPostalCode = B.PrimaryContactPostalCode
	         , A.ConvertedTimestamp       = B.ConvertedTimestamp      
	         , A.DeleteFlag               = B.DeleteFlag              
	         , A.BranchNameF_c            = B.BranchNameF_c           
	         , A.BranchCodeF_c            = B.BranchCodeF_c           
	         , A.LeadBranch_c             = B.LeadBranch_c            
	         , A.CreationDate             = B.CreationDate            
	         , A.CreatedBy                = B.CreatedBy               
	         , A.LastUpdateDate           = B.LastUpdateDate          
	         , A.LastUpdatedBy            = B.LastUpdatedBy  
	         , A.WORKDATE                 = CONVERT(DATETIME,GETDATE(),120)        
	   WHEN NOT MATCHED THEN
	      INSERT
	      (
	           LeadId, Name, LeadNumber, OwnerPartyName
	         , OwnerId, StatusCode, StatusCdMeaning, CustomerPartyName
	         , CustomerRegistryId, CustomerId, Description, ChannelType, SalesChannelMeaning
	         , ChannelTypeMeaning, PrimaryContactPartyName, PrimaryContactId, PrimaryContactCountry
	         , PrimaryContactProvince, PrimaryContactState, PrimaryContactCity, PrimaryContactAddress1
	         , PrimaryContactAddress2, PrimaryContactPostalCode, RetiredDateTime, ConvertedTimestamp
	         , DeleteFlag, BranchNameF_c, BranchCodeF_c, LeadBranch_c
	         , CreationDate, CreatedBy, LastUpdateDate, LastUpdatedBy, WORKDATE
	      )
	      VALUES
	      (
	           B.LeadId, B.Name, B.LeadNumber, B.OwnerPartyName
	         , B.OwnerId, B.StatusCode, B.StatusCdMeaning, B.CustomerPartyName
	         , B.CustomerRegistryId, B.CustomerId, B.Description, B.ChannelType, B.SalesChannelMeaning
	         , B.ChannelTypeMeaning, B.PrimaryContactPartyName, B.PrimaryContactId, B.PrimaryContactCountry
	         , B.PrimaryContactProvince, B.PrimaryContactState, B.PrimaryContactCity, B.PrimaryContactAddress1
	         , B.PrimaryContactAddress2, B.PrimaryContactPostalCode, B.RetiredDateTime, B.ConvertedTimestamp
	         , B.DeleteFlag, B.BranchNameF_c, B.BranchCodeF_c, B.LeadBranch_c
	         , B.CreationDate, B.CreatedBy, B.LastUpdateDate, B.LastUpdatedBy, CONVERT(DATETIME,GETDATE(),120) 
	      );
	</update>
	
	<!-- Temp Table TRUNCATE -->
	<delete id="deleteLeadTemp">
	   TRUNCATE TABLE dbo.tmp_lead
	</delete>
	
	<!-- SR Delete -->
	<delete id="deleteServiceRequestTmp">
		TRUNCATE TABLE tmp_approval_sr
	</delete>
	
	<!-- SR Insert -->
	<update id="insertServiceRequestTmp" parameterType="java.util.Map">
		INSERT INTO tmp_approval_sr
	     (
	           ID
	         , OBJ_TYPE
	         , TYPE
	         , ACCOUNTNAME
	         , PARTYNUMBER
	         , ADDRESS
	         , CONAID_C
	         , OTTCOUNT_C
	         , DTVCOUNT_C
	         , ISPCOUNT_C
	         , VOIPCOUNT_C
	         , CONTRACTTO_C
	         , CONTRACTFROM_C
	         , OPPORTUNITYNM
	         , EMPNUMBER
	         , OPTYBRANCH_C
	         , GOOD3_C
	         , GOOD3QTY_C
	         , GOOD1_C
	         , GOOD1QTY_C
	         , GOOD2_C
	         , GOOD2QTY_C
	         , GOOD4_C
	         , GOOD4QTY_C
	         , TARGETYN
	         , CREATIONDATE
	         , LASTUPDATEDATE
	         , APPROVALYN_C
	      )
	      VALUES
	      <foreach item="serviceRequest" index="index" collection="list" open="" separator="," close="">
	         (
	              #{serviceRequest.id}
	            , #{serviceRequest.obj_type}
	            , #{serviceRequest.type}
	            , #{serviceRequest.accountName}
	            , #{serviceRequest.partyNumber}
	            , #{serviceRequest.address}
	            , #{serviceRequest.conaId_c}
	            , #{serviceRequest.ottCount_c}
	            , #{serviceRequest.dtvCount_c}
	            , #{serviceRequest.ispCount_c}
	            , #{serviceRequest.voipCount_c}
	            , #{serviceRequest.contractTo_c}
	            , #{serviceRequest.contractFrom_c}
	            , #{serviceRequest.opportunityNm}
	            , #{serviceRequest.empNumber}
	            , #{serviceRequest.optyBranch_c}
	            , #{serviceRequest.good3_c}
	            , #{serviceRequest.good3Qty_c}
	            , #{serviceRequest.good1_c}
	            , #{serviceRequest.good1Qty_c}
	            , #{serviceRequest.good2_c}
	            , #{serviceRequest.good2Qty_c}
	            , #{serviceRequest.good4_c}
	            , #{serviceRequest.good4Qty_c}
	            , 'Y'
	            , GETDATE()
	            , GETDATE()
	            , #{serviceRequest.approvalYn_c}
	         )
		</foreach>
	</update>
	
	 <!-- Temp Table -> ServiceRequest Table Update -->
   <update id="insertServiceRequest" parameterType="java.util.Map">
      MERGE INTO STG_APPROVAL A
      USING TMP_APPROVAL_SR B
      ON (A.ID = B.ID)
      WHEN MATCHED THEN
         UPDATE SET
				  A.OBJ_TYPE 			= B.OBJ_TYPE
				, A.TYPE 				= B.TYPE
				, A.ACCOUNTNAME 		= B.ACCOUNTNAME
				, A.PARTYNUMBER 		= B.PARTYNUMBER
				, A.ADDRESS				= B.ADDRESS
				, A.CONAID_C			= B.CONAID_C
				, A.OTTCOUNT_C			= B.OTTCOUNT_C
				, A.DTVCOUNT_C			= B.DTVCOUNT_C
				, A.ISPCOUNT_C			= B.ISPCOUNT_C
				, A.VOIPCOUNT_C			= B.VOIPCOUNT_C
				, A.CONTRACTTO_C		= B.CONTRACTTO_C
				, A.CONTRACTFROM_C		= B.CONTRACTFROM_C
				, A.OPPORTUNITYNM		= B.OPPORTUNITYNM
				, A.EMPNUMBER			= B.EMPNUMBER
				, A.OPTYBRANCH_C		= B.OPTYBRANCH_C
				, A.GOOD3_C				= B.GOOD3_C
				, A.GOOD3QTY_C			= B.GOOD3QTY_C
				, A.GOOD1_C				= B.GOOD1_C
				, A.GOOD1QTY_C			= B.GOOD1QTY_C
				, A.GOOD2_C				= B.GOOD2_C
				, A.GOOD2QTY_C			= B.GOOD2QTY_C
				, A.GOOD4_C				= B.GOOD4_C
				, A.GOOD4QTY_C			= B.GOOD4QTY_C
				, A.TARGETYN			= B.TARGETYN
				, A.CREATIONDATE		= B.CREATIONDATE
				, A.LASTUPDATEDATE		= B.LASTUPDATEDATE
				, A.APPROVALYN_C		= B.APPROVALYN_C
      WHEN NOT MATCHED THEN
         INSERT
         (
               ID
	         , OBJ_TYPE
	         , TYPE
	         , ACCOUNTNAME
	         , PARTYNUMBER
	         , ADDRESS
	         , CONAID_C
	         , OTTCOUNT_C
	         , DTVCOUNT_C
	         , ISPCOUNT_C
	         , VOIPCOUNT_C
	         , CONTRACTTO_C
	         , CONTRACTFROM_C
	         , OPPORTUNITYNM
	         , EMPNUMBER
	         , OPTYBRANCH_C
	         , GOOD3_C
	         , GOOD3QTY_C
	         , GOOD1_C
	         , GOOD1QTY_C
	         , GOOD2_C
	         , GOOD2QTY_C
	         , GOOD4_C
	         , GOOD4QTY_C
	         , TARGETYN
	         , CREATIONDATE
	         , LASTUPDATEDATE
	         , APPROVALYN_C
         )
         VALUES
         (
               B.ID
	         , B.OBJ_TYPE
	         , B.TYPE
	         , B.ACCOUNTNAME
	         , B.PARTYNUMBER
	         , B.ADDRESS
	         , B.CONAID_C
	         , B.OTTCOUNT_C
	         , B.DTVCOUNT_C
	         , B.ISPCOUNT_C
	         , B.VOIPCOUNT_C
	         , B.CONTRACTTO_C
	         , B.CONTRACTFROM_C
	         , B.OPPORTUNITYNM
	         , B.EMPNUMBER
	         , B.OPTYBRANCH_C
	         , B.GOOD3_C
	         , B.GOOD3QTY_C
	         , B.GOOD1_C
	         , B.GOOD1QTY_C
	         , B.GOOD2_C
	         , B.GOOD2QTY_C
	         , B.GOOD4_C
	         , B.GOOD4QTY_C
	         , B.TARGETYN
	         , B.CREATIONDATE
	         , B.LASTUPDATEDATE
	         , B.APPROVALYN_C
         );
   </update>
	
	<!-- stg_approval -> imp_approval_sr -->
	<update id="insertImpApprovalSr" parameterType="java.util.Map">
		MERGE INTO IMP_APPROVAL_SR A
	      USING (SELECT 
				 	  ID, OBJ_TYPE, APPROVALID_C, TYPE, ACCOUNTNAME
				 	, PARTYNUMBER, ADDRESS, CONAID_C, OTTCOUNT_C, DTVCOUNT_C
				 	, ISPCOUNT_C, VOIPCOUNT_C, CONTRACTTO_C, CONTRACTFROM_C, OPPORTUNITYNM
				 	, EMPNUMBER, OPTYBRANCH_C, GOOD3_C, GOOD3QTY_C, GOOD1_C
				 	, GOOD1QTY_C, GOOD2_C, GOOD2QTY_C, GOOD4_C, GOOD4QTY_C
				 	, TARGETYN, CREATIONDATE, LASTUPDATEDATE, APPROVALYN_C
				 FROM STG_APPROVAL 
				 WHERE OBJ_TYPE = 'SR' AND TARGETYN = 'Y' ) B
	      ON (A.ID = B.ID)
	      WHEN MATCHED THEN
	      UPDATE SET
				  A.OBJ_TYPE 			= B.OBJ_TYPE
				, A.APPROVALID_C		= B.APPROVALID_C  
				, A.TYPE 				= B.TYPE
				, A.ACCOUNTNAME 		= B.ACCOUNTNAME
				, A.PARTYNUMBER 		= B.PARTYNUMBER
				, A.ADDRESS				= B.ADDRESS
				, A.CONAID_C			= B.CONAID_C
				, A.OTTCOUNT_C			= B.OTTCOUNT_C
				, A.DTVCOUNT_C			= B.DTVCOUNT_C
				, A.ISPCOUNT_C			= B.ISPCOUNT_C
				, A.VOIPCOUNT_C			= B.VOIPCOUNT_C
				, A.CONTRACTTO_C		= B.CONTRACTTO_C
				, A.CONTRACTFROM_C		= B.CONTRACTFROM_C
				, A.OPPORTUNITYNM		= B.OPPORTUNITYNM
				, A.EMPNUMBER			= B.EMPNUMBER
				, A.OPTYBRANCH_C		= B.OPTYBRANCH_C
				, A.GOOD3_C				= B.GOOD3_C
				, A.GOOD3QTY_C			= B.GOOD3QTY_C
				, A.GOOD1_C				= B.GOOD1_C
				, A.GOOD1QTY_C			= B.GOOD1QTY_C
				, A.GOOD2_C				= B.GOOD2_C
				, A.GOOD2QTY_C			= B.GOOD2QTY_C
				, A.GOOD4_C				= B.GOOD4_C
				, A.GOOD4QTY_C			= B.GOOD4QTY_C
				, A.TRNSYN				= 'N'
				, A.IMPORTDATE			= GETDATE()
				, A.APPROVALYN_C		= B.APPROVALYN_C
      WHEN NOT MATCHED THEN
         INSERT
         (
               ID
	         , OBJ_TYPE
	         , APPROVALID_C
	         , TYPE
	         , ACCOUNTNAME
	         , PARTYNUMBER
	         , ADDRESS
	         , CONAID_C
	         , OTTCOUNT_C
	         , DTVCOUNT_C
	         , ISPCOUNT_C
	         , VOIPCOUNT_C
	         , CONTRACTTO_C
	         , CONTRACTFROM_C
	         , OPPORTUNITYNM
	         , EMPNUMBER
	         , OPTYBRANCH_C
	         , GOOD3_C
	         , GOOD3QTY_C
	         , GOOD1_C
	         , GOOD1QTY_C
	         , GOOD2_C
	         , GOOD2QTY_C
	         , GOOD4_C
	         , GOOD4QTY_C
	         , TRNSYN
	         , IMPORTDATE
	         , APPROVALYN_C
         )
         VALUES
         (
               B.ID
	         , B.OBJ_TYPE
	         , B.APPROVALID_C
	         , B.TYPE
	         , B.ACCOUNTNAME
	         , B.PARTYNUMBER
	         , B.ADDRESS
	         , B.CONAID_C
	         , B.OTTCOUNT_C
	         , B.DTVCOUNT_C
	         , B.ISPCOUNT_C
	         , B.VOIPCOUNT_C
	         , B.CONTRACTTO_C
	         , B.CONTRACTFROM_C
	         , B.OPPORTUNITYNM
	         , B.EMPNUMBER
	         , B.OPTYBRANCH_C
	         , B.GOOD3_C
	         , B.GOOD3QTY_C
	         , B.GOOD1_C
	         , B.GOOD1QTY_C
	         , B.GOOD2_C
	         , B.GOOD2QTY_C
	         , B.GOOD4_C
	         , B.GOOD4QTY_C
	         , 'N'
	         , GETDATE()
	         , B.APPROVALYN_C
         );
   </update>	
   
	<!-- tmp_imp_approval_sr Delete -->
	<delete id="deletetImpApprovalSrTmp">
		TRUNCATE TABLE TMP_IMP_APPROVAL_SR
	</delete>
	
	<insert id="insertImpApprovalSrTmp" parameterType="java.util.Map">
		INSERT INTO TMP_IMP_APPROVAL_SR
		( 
			ID 
		)
		SELECT  
			ID 
		FROM STG_APPROVAL
		WHERE OBJ_TYPE = 'SR' AND TARGETYN = 'Y'
	</insert>
	
   <!-- tmp_imp table 이관 후 stg table TargetYN update -->
   <update id="updateStgApproTargetYNTmp">
		MERGE INTO STG_APPROVAL A 
		USING (SELECT ID FROM  TMP_IMP_APPROVAL_SR ) B
		ON (A.ID = B.ID)
		WHEN MATCHED THEN
		UPDATE SET
			  A.TARGETYN = 'N'
			, A.LASTUPDATEDATE = GETDATE();
   </update>
   
   <delete id="deleteApprByOpttyTemp">
		TRUNCATE TABLE TMP_APPROVAL_OPPTY
	</delete>
	
	<!-- Opportunity Temp Table Insert -->
	<update id="insertApprByOpttyTemp" parameterType="java.util.Map">
		INSERT INTO TMP_APPROVAL_OPPTY
		(
			  ID             
			, OBJ_TYPE       
			, Type           
			, AccountName    
			, PartyNumber    
			, Address        
			, ConaId_c       
			, OTTCount_c     
			, DTVCount_c     
			, ISPCount_c     
			, VoIPCount_c    
			, ContractTo_c   
			, ContractFrom_c 
			, OpportunityNm  
			, EmpNumber      
			, OptyBranch_c   
			, Good3_c        
			, Good3Qty_c     
			, Good1_c        
			, Good1Qty_c     
			, Good2_c        
			, Good2Qty_c     
			, Good4_c        
			, Good4Qty_c     
			, CreationDate   
			, LastUpdateDate 
			, ApprovalYN_c        
		)
		VALUES
		<foreach item="opportunity" index="index" collection="list" open="" separator="," close="">
			(
				  #{opportunity.id}
				, #{opportunity.obj_type}
				, #{opportunity.type}
				, #{opportunity.accountName}
				, #{opportunity.partyNumber}
				, #{opportunity.address}
				, #{opportunity.conaId_c}
				, #{opportunity.ottCount_c}
				, #{opportunity.dtvCount_c}
				, #{opportunity.ispCount_c}
				, #{opportunity.voipCount_c}
				, #{opportunity.contractTo_c}
				, #{opportunity.contractFrom_c}
				, #{opportunity.opportunityNm}
				, dbo.fn_getUserNameByPartyId(#{opportunity.empNumber})
				, #{opportunity.optyBranch_c}
				, #{opportunity.good3_c}
				, #{opportunity.good3Qty_c}
				, #{opportunity.good1_c}
				, #{opportunity.good1Qty_c}
				, #{opportunity.good2_c}
				, #{opportunity.good2Qty_c}
				, #{opportunity.good4_c}
				, #{opportunity.good4Qty_c}
				, #{opportunity.creationDate}
				, #{opportunity.lastUpdateDate}
				, #{opportunity.approvalYn_c}
							)
		</foreach>
	</update>
	
	<!-- Temp Table -> Opportunity Table Update -->
	<update id="insertApprByOptty" parameterType="java.util.Map">
		MERGE INTO STG_APPROVAL A
		USING TMP_APPROVAL_OPPTY B
		ON (A.ID = B.ID)
		WHEN MATCHED THEN
			UPDATE SET           
				  A.OBJ_TYPE        = B.OBJ_TYPE      
				, A.Type            = B.Type          
				, A.AccountName     = B.AccountName   
				, A.PartyNumber     = B.PartyNumber   
				, A.Address         = B.Address       
				, A.ConaId_c        = B.ConaId_c      
				, A.OTTCount_c      = B.OTTCount_c    
				, A.DTVCount_c      = B.DTVCount_c    
				, A.ISPCount_c      = B.ISPCount_c    
				, A.VoIPCount_c     = B.VoIPCount_c   
				, A.ContractTo_c    = B.ContractTo_c  
				, A.ContractFrom_c  = B.ContractFrom_c
				, A.OpportunityNm   = B.OpportunityNm 
				, A.EmpNumber       = B.EmpNumber     
				, A.OptyBranch_c    = B.OptyBranch_c  
				, A.Good3_c         = B.Good3_c       
				, A.Good3Qty_c      = B.Good3Qty_c    
				, A.Good1_c         = B.Good1_c       
				, A.Good1Qty_c      = B.Good1Qty_c    
				, A.Good2_c         = B.Good2_c       
				, A.Good2Qty_c      = B.Good2Qty_c    
				, A.Good4_c         = B.Good4_c       
				, A.Good4Qty_c      = B.Good4Qty_c    
				, A.TargetYN        = 'Y'      
				, A.CreationDate    = B.CreationDate  
				, A.LastUpdateDate  = B.LastUpdateDate
				, A.ApprovalYN_c    = B.ApprovalYN_c  
		WHEN NOT MATCHED THEN
			INSERT
			(
				  ID             
				, OBJ_TYPE     
				, Type           
				, AccountName    
				, PartyNumber    
				, Address        
				, ConaId_c       
				, OTTCount_c     
				, DTVCount_c     
				, ISPCount_c     
				, VoIPCount_c    
				, ContractTo_c   
				, ContractFrom_c 
				, OpportunityNm  
				, EmpNumber      
				, OptyBranch_c   
				, Good3_c        
				, Good3Qty_c     
				, Good1_c        
				, Good1Qty_c     
				, Good2_c        
				, Good2Qty_c     
				, Good4_c        
				, Good4Qty_c  
				, TargetYN   
				, CreationDate   
				, LastUpdateDate 
				, ApprovalYN_c
			)
			VALUES
			(
				  B.ID             
				, B.OBJ_TYPE     
				, B.Type           
				, B.AccountName    
				, B.PartyNumber    
				, B.Address        
				, B.ConaId_c       
				, B.OTTCount_c     
				, B.DTVCount_c     
				, B.ISPCount_c     
				, B.VoIPCount_c    
				, B.ContractTo_c   
				, B.ContractFrom_c 
				, B.OpportunityNm  
				, B.EmpNumber      
				, B.OptyBranch_c   
				, B.Good3_c        
				, B.Good3Qty_c     
				, B.Good1_c        
				, B.Good1Qty_c     
				, B.Good2_c        
				, B.Good2Qty_c     
				, B.Good4_c        
				, B.Good4Qty_c  
				, 'Y'  
				, B.CreationDate   
				, B.LastUpdateDate 
				, B.ApprovalYN_c
			);
	</update>
	
	<delete id="deleteImpApprovalByOpptyTemp">
		TRUNCATE TABLE TMP_IMP_APPROVAL_OPPTY
	</delete>
	<!-- 실적 -->
	<update id="insertImpApprovalByOpptyTemp">
      INSERT INTO TMP_IMP_APPROVAL_OPPTY
      (
			  ID
      )
     SELECT   ID
	   FROM   STG_APPROVAL
	  WHERE   TARGETYN = 'Y'
	    AND   Type     = 'OPPORTUNITY'
   </update>
   
   <update id="updateStgApproval">
      MERGE INTO STG_APPROVAL A
      USING (SELECT ID
               FROM TMP_IMP_APPROVAL_OPPTY) B
      ON (A.ID = B.ID)
      WHEN MATCHED THEN
         UPDATE SET
              A.TARGETYN          = 'N'
            , A.LASTUPDATEDATE     = GETDATE()
         ;
   </update>
   
   <update id="insertImpApprovalByOppty">
      MERGE INTO IMP_APPROVAL_OPPTY A
      USING (SELECT   ID            
					, ApprovalId_c  
					, Type          
               FROM STG_APPROVAL
              WHERE TARGETYN = 'Y'
                AND Type     = 'OPPORTUNITY') B
      ON (A.ID = B.ID)
      WHEN MATCHED THEN
         UPDATE SET           
				  A.ApprovalId_c   = B.ApprovalId_c  
				, A.Type           = B.Type          
				, A.TrnsYN         = 'N'
				, A.ImportDate     = GETDATE() 
      WHEN NOT MATCHED THEN
         INSERT(
				  ID            
				, ApprovalId_c  
				, Type          
				, TrnsYN        
				, ImportDate     
         )
         VALUES(
				  B.ID            
				, B.ApprovalId_c  
				, B.Type          
				, 'N'        
				, GETDATE()    
         );
   </update>
   
   <!-- stg_sr -> imp_sr Insert -->
   <select id="selectStgSr" parameterType="java.util.Map" resultType="vo.ImpSrVO" >
   		SELECT * FROM STG_SR
   </select>
   
	<update id="insertImpSr" parameterType="java.util.Map">
		MERGE INTO IMP_SR A
	    USING STG_SR B
	    ON (A.SEQ = B.SEQ)
	    WHEN MATCHED THEN
   	 	UPDATE SET
				  A.SEQ 				= B.SEQ
				, A.ACCOUNTNAME 		= B.TITLE
				, A.SERVICETYPE_C 		= B.SERVICETYPE_C
				, A.PARTYNUMBER			= B.PARTYNUMBER
				, A.STATUS				= B.STATUS
				, A.ASSIGNEEPERSON		= B.ASSIGNEEPERSON
				, A.DLIVECLOSEDT_C		= B.DLIVECLOSEDT_C
				, A.TRNSYN				= 'N'
				, A.IMPORTDATE			= GETDATE()
	      WHEN NOT MATCHED THEN
	         INSERT
	         (
	               SEQ
		         , TITLE
		         , SERVICETYPE_C
		         , PARTYNUMBER
		         , STATUS
		         , ASSIGNEEPERSON
		         , DLIVECLOSEDT_C
		         , TRNSYN
		         , IMPORTDATE
	         )
	         VALUES
	         (
	               B.SEQ
		         , B.TITLE
		         , B.SERVICETYPE_C
		         , B.PARTYNUMBER
		         , B.STATUS
		         , B.ASSIGNEEPERSON
		         , B.DLIVECLOSEDT_C
		         , 'N'
		         , GETDATE()
	         );
	</update>
   
   <!-- imp_sr Delete -->
	<delete id="deletetImpSrTmp">
		TRUNCATE TABLE TMP_IMP_SR
	</delete>
	
	<insert id="insertImpSrTmp" parameterType="java.util.Map">
		INSERT INTO TMP_IMP_SR
		(
			SEQ 
		)
		SELECT
			SEQ 
		FROM STG_SR
	</insert>
	
	 <!-- imp table 이관 후 stg table TargetYN update -->
   <update id="updateStgTargetYNTmp">
		MERGE INTO STG_SR A 
		USING (SELECT ID FROM  TMP_IMP_SR ) B
		ON (A.ID = B.ID)
		WHEN MATCHED THEN
		UPDATE SET
			  A.TARGETYN = 'N'
			, A.LASTUPDATEDATE = GETDATE();
   </update>
   
   <select id="selectImpApprovalSrCSV" resultType="java.util.Map">
   		SELECT 
   			   ID					as ID
	         , OBJ_TYPE				as ObjType
	         , APPROVALID_C			as ApprovalIdC
	         , TYPE					as Type
	         , ACCOUNTNAME			as AccountName
	         , PARTYNUMBER			as PartyNumber
	         , ADDRESS				as Address
	         , CONAID_C				as ConaIDC
	         , OTTCOUNT_C			as OTTCountC
	         , DTVCOUNT_C			as DTVCountC
	         , ISPCOUNT_C			as ISPCountC
	         , VOIPCOUNT_C			as VOIPCountC
	         , CONTRACTTO_C			as ContractToC
	         , CONTRACTFROM_C		as ContractFromC
	         , OPPORTUNITYNM		as OpportunityNm
	         , EMPNUMBER			as EmpNumber
	         , OPTYBRANCH_C			as OptyBranchC
	         , GOOD3_C				as Good3C
	         , GOOD3QTY_C			as Good3QtyC
	         , GOOD1_C				as Good1C
	         , GOOD1QTY_C			as Good1QtyC
	         , GOOD2_C				as Good2C
	         , GOOD2QTY_C			as Good2QtyC
	         , GOOD4_C				as Good4C
	         , GOOD4QTY_C			as Good4QtyC
	         , TRNSYN				as TrnsYN
	         , IMPORTDATE			as ImportDate
	         , TRNSDATE				as TrnsDate
	         , APPROVALYN_C			as ApprovalYNC
   		FROM IMP_APPROVAL_SR	
   </select>
    
    <delete id="deleteImpAccountTemp">
		TRUNCATE TABLE TMP_IMP_ACCOUNT
	</delete>
	<!-- 실적 -->
	<update id="insertImpAccountTemp">
      INSERT INTO TMP_IMP_ACCOUNT
      (
			  SEQ
      )
     SELECT   SEQ
	   FROM   STG_ACCOUNT
	  WHERE   TARGETYN = 'Y'
   </update>
   
   <update id="updateStgAccount">
      MERGE INTO STG_ACCOUNT A
      USING (SELECT SEQ
               FROM TMP_IMP_ACCOUNT) B
      ON (A.SEQ = B.SEQ)
      WHEN MATCHED THEN
         UPDATE SET
              A.TARGETYN          = 'N'
            , A.LASTUPDATEDATE     = GETDATE()
         ;
   </update>
   
   <update id="insertImpAccount">
      MERGE INTO IMP_ACCOUNT A
      USING (SELECT   SEQ
					, CONAID_C
					, LTRIM(RTRIM(PARTYNUMBER))
					, LTRIM(RTRIM(OTTCOUNT_C)) AS OTTCOUNT_C
					, LTRIM(RTRIM(DTVCOUNT_C)) AS DTVCOUNT_C
					, LTRIM(RTRIM(ISPCOUNT_C)) AS ISPCOUNT_C
					, LTRIM(RTRIM(VOIPCOUNT_C)) AS VOIPCOUNT_C
					, LTRIM(RTRIM(STANDARDFEE_C)) AS STANDARDFEE_C
					, LTRIM(RTRIM(SURFEE_C)) AS SURFEE_C
					, CONTRACTTO_C
					, CONTRACTFROM_C
               FROM STG_ACCOUNT
              WHERE TARGETYN = 'Y') B
      ON (A.SEQ = B.SEQ)
      WHEN MATCHED THEN
         UPDATE SET
				, A.CONAID_C       = B.CONAID_C
				, A.PARTYNUMBER    = B.PARTYNUMBER
				, A.OTTCOUNT_C     = B.OTTCOUNT_C
				, A.DTVCOUNT_C     = B.DTVCOUNT_C
				, A.ISPCOUNT_C     = B.ISPCOUNT_C
				, A.VOIPCOUNT_C    = B.VOIPCOUNT_C
				, A.STANDARDFEE_C  = B.STANDARDFEE_C
				, A.SURFEE_C       = B.SURFEE_C
				, A.CONTRACTTO_C   = B.CONTRACTTO_C
				, A.CONTRACTFROM_C = B.CONTRACTFROM_C
				, A.TRNSYN         = 'N'
				, A.IMPORTDATE     = GETDATE()
      WHEN NOT MATCHED THEN
         INSERT(
				  SEQ
				, CONAID_C
				, PARTYNUMBER
				, OTTCOUNT_C
				, DTVCOUNT_C
				, ISPCOUNT_C
				, VOIPCOUNT_C
				, STANDARDFEE_C
				, SURFEE_C
				, CONTRACTTO_C
				, CONTRACTFROM_C
				, TRNSYN
				, IMPORTDATE
         )
         VALUES(
				  B.SEQ
				, B.CONAID_C
				, B.PARTYNUMBER
				, B.OTTCOUNT_C
				, B.DTVCOUNT_C
				, B.ISPCOUNT_C
				, B.VOIPCOUNT_C
				, B.STANDARDFEE_C
				, B.SURFEE_C
				, B.CONTRACTTO_C
				, B.CONTRACTFROM_C
				, 'N'
				, GETDATE()
         );
   </update>
   
   <delete id="deleteTransAccountTemp">
		TRUNCATE TABLE TMP_TRNS_ACCOUNT
	</delete>
	<!-- 실적 -->
	<update id="insertTransAccountTemp">
      INSERT INTO TMP_TRNS_ACCOUNT
      (
			   SEQ
      )
      SELECT   SEQ
	    FROM   IMP_ACCOUNT
	   WHERE   TRNSYN = 'N'
   </update>
   
   <update id="updateImpAccount">
      MERGE INTO IMP_ACCOUNT A
      USING (SELECT SEQ
               FROM TMP_TRNS_ACCOUNT) B
      ON (A.SEQ = B.SEQ)
      WHEN MATCHED THEN
         UPDATE SET
              A.TRNSYN          = 'Y'
            , A.TRNSDATE        = GETDATE()
         ;
   </update>
   
   <select id="imp_account" resultType="java.util.Map">
		SELECT    PartyNumber 
				, ConaId_c      
				, OTTCount_c    
				, DTVCount_c    
				, ISPCount_c    
				, VoIPCount_c   
				, StandardFee_c 
				, SurFee_c       
				, (SUBSTRING(ContractTo_c,1,4)+'-'+SUBSTRING(ContractTo_c,5,2)+'-'+SUBSTRING(ContractTo_c,7,2)) as ContractFrom_c 
				, (SUBSTRING(ContractFrom_c,1,4)+'-'+SUBSTRING(ContractFrom_c,5,2)+'-'+SUBSTRING(ContractFrom_c,7,2)) as ContractTo_c
<!-- 				, (SUBSTRING(ContractTo_c,1,4)+'-'+SUBSTRING(ContractTo_c,5,2)+'-'+SUBSTRING(ContractTo_c,7,2)) as  ContractTo_c -->
<!-- 				, (SUBSTRING(ContractFrom_c,1,4)+'-'+SUBSTRING(ContractFrom_c,5,2)+'-'+SUBSTRING(ContractFrom_c,7,2)) as ContractFrom_c -->
		  FROM    IMP_ACCOUNT
		 WHERE    TRNSYN          = 'N'
   </select>
	
	
</mapper>